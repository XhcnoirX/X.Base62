<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2018.1.5 (Build 659_0_20788U)" ts="2024-06-11 22:31:14">
<Class name="X.Base62">
<Description>
Base62 encoder and decoder
With separate encoder/decoder for integers (as opposed to a string containing an integer)

@see https://github.com/tuupola/base62</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>67002,80867.114275</TimeChanged>
<TimeCreated>67002,77058.505182</TimeCreated>

<Parameter name="RANGE">
<Type>%String</Type>
<Default>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</Default>
</Parameter>

<Method name="Encode">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%String="",range:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set range = ..SetRange(range)
	set data = []
	for i=1:1:$l(input) {
		do data.%Push($ascii($e(input, i)))
	}
	set data = ..FromBaseToBase(.data, 256, 62)
	set output = ""
	for i=data.%Size()-1:-1:0 {
		set output = output _ $e(range, data.%Get(i) + 1)
	}
	quit output
]]></Implementation>
</Method>

<Method name="Decode">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%String="",range:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set range = ..SetRange(range)
	do ..ValidateInput(input, range)
	set data = []
	for i=1:1:$l(input) {
		do data.%Push($find(range, $e(input, i)) - 2)
	}
	set data = ..FromBaseToBase(.data, 62, 256)
	set output = ""
	for i=data.%Size()-1:-1:0 {
		set output = output _ $char(data.%Get(i))
	}
	quit output
]]></Implementation>
</Method>

<Method name="EncodeInteger">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%Integer=0,range:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set range = ..SetRange(range)
	set data = []
	do data.%Push(input)
	set data = ..FromBaseToBase(.data, 10, 62)
	set output = ""
	for i=data.%Size()-1:-1:0 {
		set output = output _ $e(range, data.%Get(i) + 1)
	}
	quit output
]]></Implementation>
</Method>

<Method name="DecodeInteger">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%String="",range:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set range = ..SetRange(range)
	do ..ValidateInput(input, range)
	set data = []
	for i=1:1:$l(input) {
		do data.%Push($find(range, $e(input, i)) - 2)
	}
	set data = ..FromBaseToBase(.data, 62, 10)
	set output = 0
	for i=data.%Size()-1:-1:0 {
		set output = output*10 + data.%Get(i)
	}
	quit output
]]></Implementation>
</Method>

<Method name="SetRange">
<ClassMethod>1</ClassMethod>
<FormalSpec>range:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if range'="" {
		if $l(range)'=62 {
			set $zerror = "Supplied range is not of length 62!"
			throw
		}
		for i=1:1:61 {
			if $e(range, i+1, *)[$e(range,i) {
				set $zerror = "Supplied range does not contain 62 unique characters!"
				throw
			}
		}
		quit range
	}
	quit ..#RANGE
]]></Implementation>
</Method>

<Method name="FromBaseToBase">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&arr:%DynamicArray,from:%Integer,to:%Integer]]></FormalSpec>
<Private>1</Private>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	set output = []
	set count = arr.%Size()
	while count>0 {
		set quotient = []
		set remainder = 0
		for i=1:1:count {
			set accumulator = arr.%Get(i-1) + (remainder*from)
			set remainder = ##class(X.Utils).Modulo(accumulator, to)
			set digit = (accumulator - remainder) / to
			if quotient.%Size() || (digit>0) {
				do quotient.%Push(digit)
			}
		}
		do output.%Push(remainder)
		set arr = quotient
		set count = arr.%Size()
	}
	quit output
]]></Implementation>
</Method>

<Method name="ValidateInput">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%String="",range:%String=""</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set range = ..SetRange(range)
	for i=1:1:$l(input) {
		if range'[$e(input, i) {
			set $zerror = "Data contains invalid characters"
			throw
		}
	}
]]></Implementation>
</Method>
</Class>
</Export>
